package com.noteapp.common.dao;

import com.noteapp.common.dao.connection.SQLDatabaseConnection;
import com.noteapp.common.dao.sql.ISQLReader;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;

/**
 * Cung cấp các phương thức cơ bản để kết nối dữ liệu và đọc file SQL
 * @author Nhóm 17
 * @version 1.0
 */
public class BasicDAO {
    protected SQLDatabaseConnection databaseConnection;
    protected ISQLReader fileReader;
    protected Map<String, String> enableQueries;
    
    protected static final String DATABASE_HOST = "localhost";  
    protected static final int DATABASE_PORT = 3306;
    protected static final String DATABASE_NAME = "notelitedb";
    protected static final String DATABASE_USERNAME = "root";
    protected static final String DATABASE_PASSWORD = "Asensio1234@";

    public void setDatabaseConnection(SQLDatabaseConnection databaseConnection) {
        this.databaseConnection = databaseConnection;
    }

    public void setFileReader(ISQLReader fileReader) {
        this.fileReader = fileReader;
    }
    
    /**
     * Khởi tạo một connection tới CSL
     * @param connection Một {@link SQLDatabaseConnection} là connection giúp 
     * liên kết với CSDL
     */
    protected void initConnection() {
        //init connection
        databaseConnection.connect();
    }
    
    /**
     * Lấy các query của một
     * @param sqlFile 
     */
    protected void getEnableQueriesFrom(String sqlFile) {
        //Get enable Queries
        enableQueries = fileReader.readSQL(sqlFile);
    }
    
    /**
     * Lấy và trả về một câu lệnh được chuẩn bị sẵn theo loại truy vấn
     * @param queriesType loại truy vấn (dưới dạng string)
     * @return Một {@link PrepareStatement} là môt câu lệnh truy vấn SQL
     * đã được chuẩn bị sẵn tương ứng với loại truy vấn được yêu cầu
     * @throws SQLException Nếu kết nối tới CSDL không tồn tại
     */
    protected PreparedStatement getPrepareStatement(String queriesType) throws SQLException {
        //Kiểm tra kết nối
        if (databaseConnection.getConnection() == null) {
            throw new SQLException("Connection null!");
        }
        
        if (!enableQueries.containsKey(queriesType)) {
            throw new SQLException("Unsupported Query Type");
        }
        //Lấy query và truyền vào connection
        String query = enableQueries.get(queriesType);
        return databaseConnection.getConnection().prepareStatement(query);
    }
    
    /**
     * Lấy và trả về một câu lệnh được chuẩn bị sẵn theo loại truy vấn,
     * đồng thời câu lệnh này sẽ dẫn tới việc tự tạo một key trong CSDL
     * @param queriesType loại truy vấn
     * @param autoGeneratedKeys một số nguyên miêu tả generated keys
     * @return Một câu lệnh được chuẩn bị sẵn
     * @throws SQLException Nếu kết nối tới CSDL không tồn tại hoặc
     * xảy ra vấn đề khi tạo câu lệnh
     * @see java.sql.Connection#prepareStatement(String, int)
     */
    protected PreparedStatement getPrepareStatement(String queriesType, int autoGeneratedKeys) throws SQLException {
        //Kiểm tra kết nối
        if (databaseConnection.getConnection() == null) {
            throw new SQLException("Connection null!");
        }
        
        if (!enableQueries.containsKey(queriesType)) {
            throw new SQLException("Unsupported Query Type");
        }
        //Lấy query và truyền vào connection
        String query = enableQueries.get(queriesType);
        return databaseConnection.getConnection().prepareStatement(query, autoGeneratedKeys);
    }
}
